// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enrollments   Enrollment[]
  progress      Progress[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  price       Float
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  modules     Module[]
  enrollments Enrollment[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String
  order       Int
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  order       Int
  moduleId    String
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  progress  Progress[]

  @@unique([userId, courseId])
}

model Progress {
  id         String   @id @default(cuid())
  userId     String
  moduleId   String?
  lessonId   String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lesson     Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed  Boolean  @default(false)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
} 